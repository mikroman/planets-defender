//   100 POKE53280,0:REM BORDER
//   200 POKE53281,0:REM BACKGROUND
//   300 PRINT"{clear}{down}";:REM CLEAR THE SCREEN AND MOVE DOWN ONE LINE
//   400 POKE649,1:REM 649=MAXIMUM KEYBOARD BUFFER SIZE
//   500 POKE650,255:REM ALL KEYS WILL REPEAT
//   !-POKE 650,0 Normal keys only Repeat
//   !-POKE 650,128 Enable all keys Repeat
//   !-POKE 650,64 Disables Repeat of All Keys
//   !-Bits #6-#7: %00 = Only crsr up,down,left,right,Insert,Delete and Space repeat; %01 = No key repeats; %1x = All keys repeat.
//   600 POKE651,1:REM DELAY BETWEEN KEY REPEATS
//   !-POKE651,255: 4 second delay to repeat
//   700 POKE652,1:REM DELAY UNTIL FIRST KEY REPEAT BEGINS
//   800 POKE198,0:REM NUMBER OF CHARS WAITING IN BUFFER
//   900 PRINT"{space*10}N{cm y*17}M"
//  1000 PRINT"{space*6}{sh space}{space*3}{cm h}planets{space*2}defender{cm n}"
//  1100 PRINT"{space*10}M{cm p*17}N"
//  1200 PRINT"{down}you must defend your planet from a "
//  1300 PRINT"fleet of ufo's by guiding missiles onto"
//  1400 PRINT"them. they accelerate as they come down to bomb your planet."
//  1500 PRINT"you have twenty missiles to shoot down"
//  1600 PRINT"10 of the ufo's. good luck!"
//  1700 PRINT"use the keyboard or joystick in port2"
//  1800 PRINT"{down}you can use the hyperthrust which gives an extra burst of speed but "
//  1900 PRINT"makes the missile difficult to control "
//  2000 PRINT"{down}your planet is destroyed if you run out of missiles"
//  2100 PRINT"if ufo is not destroyed it will return!"
//  2200 PRINT"{down}{space*15}hit space"
//  2300 GOSUB22100:REM SET UP SID
//  2400 GOSUB22600:REM PLAY FREQ SWEEP
//  2500 A$="":REM NULL THE A$
//  2600 GETA$:REM GET A KEY
//  2700 IFA$<>" "THEN2500:REM WAIT FOR SPACE
//  2800 PRINT"{clear}{down}{space*8}if using the joystick:"
//  2900 PRINT"{down}{reverse on}west {reverse off} left{space*6}{reverse on}east{reverse off} right"
//  3000 PRINT"{down}{reverse on}north{reverse off} hyperthrust"
//  3100 PRINT"{down*2}{space*8}if using the keyboard:"
//  3200 PRINT"{down}{reverse on}<{reverse off}{space*2}left{space*8}{reverse on}>{reverse off} right"
//  3300 PRINT"{down}{reverse on}?{reverse off} hyperthrust"
//  3400 POKE53280,0:REM BORDER
//  3500 POKE53281,0:REM BACKGROUND
//  3600 PRINT"{down}{space*14}please wait"
//  3700 PRINT"{space*10}N{cm y*17}M"
//  3800 PRINT"{sh space}{space*9}{cm h}planets{space*2}defender{cm n}"
//  3900 PRINT"{space*10}M{cm p*17}N"
//  4000 GOTO24400:REM COTINUE SET UP
//  4100 PRINT"{clear}{down*4}{space*4}set skill level 1=easy{space*2}7=hard:"
//  4200 GETA$:REM GET A KEY
//  4300 IFA$=""THEN4200:REM WAIT FOR A KEYPRESS
//  4400 DZ=INT(VAL(A$)):REM DZ = A NUMBER VALUE OF THE KEYPRESS
//  !-the INT function for rounding is not necessary here.
//  4500 IFDZ<1THEN4200:REM CHECK OUT OF RANGE?
//  4600 IFDZ>7THEN4200
//  4700 POKE53280,0:REM BORDER
//  4800 POKE650,129:REM WHICH KEYS WILL REPEAT
//  4900 POKE53281,3:REM BACKGROUND
//  5000 POKE54296,15:REM VOLUME
//  5100 POKE53272,31:REM SELECT WHICH CHARACTER BANK THE VIC SEES
//  5200 PRINT"{clear}{up}{white}hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
//  5300 GOSUB22100:REM SET UP SID
//  5400 FORI=1TO19:REM PRINT 19 BLANK LINES
//  5500 PRINT"{]*40}";:REM ] IS THE BLANK REPLACEMENT CHAR
//  5600 NEXT
//  5700 PRINT"{green}hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
//  5800 PRINT"{yellow}{reverse on}{space*5}missiles{space*17}u.f.o's{space*3}";
//  5900 PRINT"{reverse off}{light blue}@@@@@@@@@@@@@@@@@@@@{space*8}hhhhhhhhhh{space*2}";
//  6000 B=54272:REM COLOUR RAM PTR (ADDED TO A1)
//  6100 A1=1804:REM SCREEN RAM PTR
//  6200 M1=-40:REM MISSILE MOVEMENT
//  6300 P1=100:REM UNUSED
//  6400 N1=20:REM UNUSED
//  6500 POKEA1,0:REM MISSILE UP
//  6600 POKEA1+B,2:REM MATCHING COLOUR ADDRESS
//  6700 SE=1:REM UFO TRAVEL DISTANCE PER STEP
//  6800 IFC1=0THENM1=-40:REM DIRECTION SETS MISSILE MOVEMENT VARIABLE
//  6900 IFC1=1THENM1=-39
//  7000 IFC1=2THENM1=1
//  7100 IFC1=3THENM1=41
//  7200 IFC1=4THENM1=40
//  7300 IFC1=5THENM1=39
//  7400 IFC1=6THENM1=-1
//  7500 IFC1=7THENM1=-41
//  9100 A1=A1+M1:REM NEW POSITION
//  9200 A3=PEEK(A1):REM WHAT IS THERE NOW?
//  9300 IFPEEK(A1-M1)>7THEN9500:REM IF IT'S NOT A MISSLE SHAPE
//  9400 POKEA1-M1,29:REM ERASE PREVIOUS MISSILE CHAR
//  9500 IFA1<>A2THEN10100:REM NOT A MISSILE/UFO COLLISION?
//  9600 Z=A1:REM IT'S A HIT
//  9700 GOSUB15200:REM RESET SOME VARS
//  9800 GOSUB16100:REM RESET SOME VARS
//  9900 GOSUB16900:REM SHOW FLASH/PLAY EXPLOSION SFX
// 10000 GOTO6800:REM START NEXT ROUND
// 10100 IFA3<>29THEN10400:REM IF IT'S NOT A BLANK
// 10200 POKEA1,C1:REM MISSILE CHARACTER 0-7
// 10300 POKEA1+B,14:REM TRIANGLE UP
// 10400 IFA3>13THEN10900:REM SOLID BLOCK
// 10500 Z=A1:REM HIT THE GROUND/CLOUDS
// 10600 GOSUB14600:REM RESET SOME VARS
// 10700 GOSUB15200:REM RESET SOME VARS
// 10800 GOSUB16900:REM SHOW FLASH/PLAY EXPLOSION SFX
// 10900 IFT2<1THEN11300:REM CONTINUE UNLESS IN SPEED BOOST MODE
// 11000 T2=T2-1:REM SPEED BOOST COUNTER
// 11100 GOTO9100:REM SKIP INPUT CONTROL WHILE HI-SPEED
// 11300 POKE1104+SP,29:REM BLANK WHERE UFO WAS
// 11400 SP=SP+SE:REM INCREASE UFO'S DISTANCE BY STEP SE
// 11500 POKE1104+SP,8:REM (OTHER)TRIANGLE-UP CHAR
// 11600 POKEB+1104+SP,0:REM MISSLE UP CHAR
// 11700 SE=SE+.04:REM INCREASE UFO TRAVEL DISTANCE PER STEP
// 11800 IFSE>DZTHENSE=DZ:REM DO NOT INCREASE PAST DIFFICULTY LEVEL
// 11900 IFSP<681THEN12300:REM IS THE UFO TOO LOW?
// 12000 POKE1104+SP,29:REM BLANK CHAR
// 12100 SP=1:REM RESET UFO PTRS
// 12200 SE=1:REM UFO TRAVEL DISTANCE PER STEP
// 12300 ZX=PEEK(197):REM CURRENT KEYPRESS
// 12400 JL=NOTPEEK(56320)AND15:REM BIT SELECTION FOR PORT2 JOYSTICK
// !- center=0, up=1, down=2, left=4, right=8
// !- NOT will flip the bits. So if PEEK(56320)=123...
// !- (NOT 123 %01111011) = -124 %10000100
// !- (124 %10000100 AND 15 %00001111) = 4 %00000100
// !- in this example we would be going left
// 12500 IFJL=4THEN12700:REM WEST
// 12600 IFZX<>47THEN13000:REM < KEY(left)
// 12700 C1=C1-1:REM CHANGE MISSILE CHARACTER BASED ON DIRECTION
// 12800 IFC1<0THENC1=7:REM ONLY 8 MISSILE CHARS
// 12900 GOTO6800:REM START NEXT ROUND
// 13000 IFJL=8THEN13200:REM EAST
// 13100 IFZX<>44THEN13500:REM > KEY(right)
// 13200 C1=C1+1:REM CHANGE MISSILE CHARACTER BASED ON DIRECTION
// 13300 IFC1=8THENC1=0:REM ONLY 8 MISSILE CHARS
// 13400 GOTO6800:REM START NEXT ROUND
// 13500 IFJL<>1THEN13700:REM CHECK FOR A KEYPRESS
// 13600 GOTO13800:REM NORTH WAS PRESS ON JOY
// 13700 IFZX<>55THEN13900:REM ? KEY(speed boost) WAS NOT PRESSED
// 13800 T2=5:REM SPEED BOOST ENGAGED
// 13900 M1=-41:M2=-41:REM M2 NOT USED. SHOULD BE M1?
// 14000 GOTO6800:REM START NEXT ROUND
// !- NEVER EXECUTES THIS CODE TO 14500
// 14100 IFD2<6THEN14400
// 14200 D2=D2-1
// 14300 GOTO14000
// 14400 IFD1=0THEN6800:REM START NEXT ROUND
// 14500 IFPEEK(A1)>7THEN14600
// !- ABOVE IS REDUNDANT CODE
// 14600 A1=1804:REM RESET MISSILE AND UFO PTRS
// 14700 C1=0:REM MISSILE CHARACTER
// 14800 M1=-40:REM MISSILE MOVEMENT
// 14900 F1=F1-1:REM NUMBER OF MISSILES
// 15000 POKE1904+20+F1,29:REM BLANK OUT THE MISSILE JUST FIRED
// 15100 RETURN
// 15200 REM IFPEEK(SF)=9THENPOKESF,29 (BAD LINE)
// 15300 T1=0:REM NOT USED
// 15400 T3=0:REM NOT USED
// 15500 SF=0:REM NOT USED
// 15600 S1=0:REM NOT USED
// 15700 RETURN
// 15800 IFPEEK(A1)<8THENPOKEA1,29
// 15900 REM IFPEEK(SA)=9THENPOKESA,29 (BAD LINE)
// 16000 RETURN
// 16100 REM IFPEEK(SA)=9THENPOKESA,29 (BAD LINE)
// 16200 D1=0:REM NOT USED
// 16300 D3=0:REM NOT USED
// 16400 SA=0:REM NOT USED
// 16500 S2=0:REM NOT USED
// 16600 RETURN
// 16700 REM IFPEEK(SF)=9THENPOKESF,29 (BADLINE)
// 16800 RETURN
// 16900 J2=Z:REM COLLISION POSITION
// 17000 GOTO18300
// !- NEVER EXECUTES THIS CODE TO 18200
// 17100 POKE54276,17:REM TRIANGLE WAVEFORM: NEVER GETS HERE(FREQ SWEEP UP SOUND EFFECT)
// 17200 J1=50:REM FREQUENCY VARIABLE
// 17300 FORJ2=Z+40TO1903STEP40
// 17400 J1=J1+3
// 17500 POKE54273,J1:REM LF
// 17600 POKE54272,J1:REM HF
// 17700 V=V+1
// 17800 IFV>7THENV=0
// 17900 IFPEEK(J2-40)<8THENPOKEJ2-40,29
// 18000 IFPEEK(J2)<>29THEN18100
// 18005 Q=INT(15*RND(1))+1:REM RANDOM NUMBER 1-15
// 18010 POKEJ2+B,Q
// 18100 NEXT
// 18200 WV=129
// !- ABOVE IS REDUNDANT CODE
// 18300 FORJ3=1TO15:REM EXPLOSION CHARS
// 18400 POKEJ2,24:REM EXPLOSION CHAR
// 18450 Q=INT(15*RND(1))+1
// 18500 POKEJ2+B,Q:REM RANDOM CHAR FROM 1-15
// 18600 NEXT
// 18700 POKEJ2,29:REM BLANK OUT THE EXPLOSION
// 18800 POKEJ2+B,1:REM COLOUR MATCH
// 18900 IFJ2<1063THEN19200
// 19000 IFJ2>1823THEN19200
// 19100 GOTO19500
// 19200 POKEJ2,8:REM TRIANGLE UP
// 19300 POKEJ2+B,1:REM COLOUR MATCH
// 19400 GOTO20200
// 19500 G2=G2+1
// 19600 POKE1942-G2,29:REM BLANK
// 19700 GOSUB23400:REM NOISE SWEEP
// 19800 GOSUB22100:REM RESET SID
// 19900 POKE1064+SP,29:REM BLANK
// 20000 SP=1:REM UFO'S DISTANCE
// 20100 SE=1:REM UFO TRAVEL DISTANCE PER STEP
// 20200 IFG2<>10THEN20600:REM CHECK MISSILE COUNT IF NOT 10 UFOS
// 20300 POKE53272,21:REM NORMAL CHARSET CHOSEN
// 20400 PRINT"{clear}{down*4} you saved the planet"
// 20500 GOTO21300
// 20600 IFF1<>-20THEN21000:REM IF STILL HAS MISSILES
// 20700 POKE53272,21:REM NORMAL CHARSET
// 20800 PRINT"{clear}{down*4} no more missiles:ufo's win"
// 20900 GOTO21300
// 21000 IFG2<>10THEN21200:REM STILL HAS UFOS TO DESTROY
// 21100 IFF1=-20THEN21300:REM STILL HAS MISSILES TO FIRE
// 21200 RETURN
// 21300 GOSUB22600:REM PLAY FREQ SWEEP
// 21400 FORZX=1TO1500:REM DELAY LOOP
// 21500 NEXT
// 21600 PRINT"{down*2} press space bar to continue"
// 21700 GETA$:REM GET A KEYSTROKE
// 21800 IFA$<>" "THEN21700:REM WAIT FOR SPACE BAR
// 21900 GOSUB26500:REM CLEAR VARIABLES
// 22000 GOTO4100:REM SELECT SKILL AND START
// 22100 POKE54296,15:REM SET VOLUME TO 15(HIGH)
// 22200 POKE54276,33:REM VOICE1 CONTROL REGISTER(SAWTOOTH GATE)
// 22210 POKE54277,128:REM AD =128
// 22220 POKE54278,128:REM SR =128
// 22300 POKE54273,3:REM LOW FREQ
// 22400 POKE54272,33:REM HI FREQ
// 22500 RETURN
// 22600 POKE54276,33:REM GATE THE SOUND
// 22700 FORZX=1TO150STEP3:REM SWEEP THE FREQ.
// 22800 POKE54273,ZX:REM LF
// 22900 POKE54272,ZX:REM HF
// 23000 NEXT
// 23100 POKE54276,32:REM TURN OFF THE GATE
// 23300 RETURN
// 23400 POKE54276,129:REM SET NOISE WAVEFORM
// 23500 ZF=4:REM UNUSED
// 23600 POKE54296,15:REM MAX VOLUME
// 23700 FORZD=30TO2STEP-1:REM FREQ SWEEP DOWN
// 23800 POKE54273,ZD:REM LF
// 23900 POKE54272,ZD:REM HF
// 24000 NEXT
// 24100 POKE54272,32:REM LF
// 24200 POKE54273,3:REM HF
// 24300 RETURN
// 24400 POKE52,56:REM LOWER THE TOP OF MEMORY
// 24500 POKE56,56:REM SET HIGHEST ADDRESS USED BY BASIC
// 24600 CLR:REM CLEAR VARIABLES/ARRAYS AND SET STRING PTRS
// 24700 POKE56334,PEEK(56334)AND254:REM STOP TIMER; NO INTERRUPTS
// 24800 CN=0:REM INTIALIZE CHARACTER NUMBER COUNTER
// 24900 POKE1,PEEK(1)AND251:REM SELECT CHARACTER ROM
// 25000 FORI=0TO2047:REM 2K NEEDED FOR FULL CHARSET
// 25100 PRINT"{home}";I:REM SHOW SOMETHING WORKING
// 25200 POKEI+14336,PEEK(53248+I):REM COPY THE CHARSET INTO RAM
// 25300 NEXTI
// 25400 POKE1,PEEK(1)OR4:REM SELECT I/O
// 25500 POKE56334,PEEK(56334)OR1:REM RESTART CIA TIMER
// 25600 FORI=0TO7:REM LOOP THROUGH CHAR DATA
// 25700 READCD:REM TRANSFER A BYTE OF DATA INTO CD
// 25800 IFCD>-1THEN26100:REM DONE?
// 25900 I=7:REM THIS STILL LEAVES A 'FOR I' ON THE STACK. SHOULD BE I=7:NEXTI
// 26000 GOTO4100:REM SET SKILL LEVEL AND START GAME
// 26100 POKE14336+8*CN+I,CD:REM INSERT OUR CHARSET PORTION
// 26200 NEXTI
// 26300 CN=CN+1:REM CHARACTER NUMBER COUNTER
// 26400 GOTO25600
// 26500 DZ=0:B=0:A1=0:M1=0:P1=0:N1=0:SE=0:I=0:C1=0:M2=0:A2=0:A3=0:T1=0:T2=0:T3=0
// 26600 SP=0:Z=0:ZX=0:JL=0:D2=0:D3=0:SA=0:SF=0:J1=0:J2=0:V=0:WV=0:G2=0:F1=0
// 26700 ZX=0:ZD=0:ZF=0:CN=0:CD=0:S1=0:D1=0:S2=0:REM VARIABLE INITIALIZATION
// 26800 RETURN
// 26900 DATA 16,56,56,56,16,56,124,108
// 27000 DATA 1,14,14,14,112,208,48,32
// 27100 DATA 0,192,238,127,238,192,0,0
// 27200 DATA 32,48,208,112,14,14,14,1
// 27300 DATA 108,124,56,16,56,56,56,16
// 27400 DATA 4,12,11,14,112,112,112,128
// 27500 DATA 0,3,119,254,119,3,0,0
// 27600 DATA 128,112,112,112,14,11,12,4
// 27700 DATA 0,0,0,0,24,60,126,255
// 27800 DATA 192,224,192,159,211,145,153,223
// 27900 DATA 16,48,56,56,92,100,124,254
// 28000 DATA 254,116,44,56,16,16,16,255
// 28100 DATA 24,60,108,118,124,56,16,255
// 28200 DATA 255,255,255,255,255,255,255,255
// 28300 DATA 0,0,0,0,24,60,126,255
// 28400 DATA 128,128,224,248,248,240,224,128
// 28500 DATA 255,126,126,60,24,8,0,0
// 28600 DATA 1,7,7,31,15,7,3,1
// 28700 DATA 255,255,255,255,255,255,255,255
// 28800 DATA 3,3,0,0,0,0,0,0
// 28900 DATA 0,0,0,0,14,15,7,7
// 29000 DATA 0,0,0,0,0,128,224,192
// 29100 DATA 224,224,192,0,0,0,0,0
// 29200 DATA 24,126,129,90,36,24,24,36
// 29300 DATA 137,93,42,212,47,52,206,145
// 29400 DATA 5,2,1,0,0,0,0,0
// 29500 DATA 0,0,0,0,0,1,2,5
// 29600 DATA 0,0,0,0,0,128,64,160
// 29700 DATA 160,64,128,0,0,0,0,0
// 29800 DATA 0,0,0,0,0,0,0,0
// 29900 DATA 0,92,92,126,126,92,92,0
// 30000 DATA -1